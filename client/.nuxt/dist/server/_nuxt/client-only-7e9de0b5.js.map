{"version":3,"file":"client-only-7e9de0b5.js","sources":["../../../../node_modules/nuxt/dist/app/components/client-only.mjs"],"sourcesContent":["import { ref, onMounted, defineComponent, createElementBlock, h, createElementVNode } from 'vue'\n\nexport default defineComponent({\n  name: 'ClientOnly',\n  inheritAttrs: false,\n  // eslint-disable-next-line vue/require-prop-types\n  props: ['fallback', 'placeholder', 'placeholderTag', 'fallbackTag'],\n  setup (_, { slots, attrs }) {\n    const mounted = ref(false)\n    onMounted(() => { mounted.value = true })\n    return (props) => {\n      if (mounted.value) { return slots.default?.() }\n      const slot = slots.fallback || slots.placeholder\n      if (slot) { return slot() }\n      const fallbackStr = props.fallback || props.placeholder || ''\n      const fallbackTag = props.fallbackTag || props.placeholderTag || 'span'\n      return createElementBlock(fallbackTag, attrs, fallbackStr)\n    }\n  }\n})\n\nconst cache = new WeakMap()\n\nexport function createClientOnly (component) {\n  if (cache.has(component)) {\n    return cache.get(component)\n  }\n\n  const clone = { ...component }\n\n  if (clone.render) {\n    // override the component render (non script setup component)\n    clone.render = (ctx, ...args) => {\n      if (ctx.mounted$) {\n        const res = component.render(ctx, ...args)\n        return (res.children === null || typeof res.children === 'string')\n          ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag)\n          : h(res)\n      } else {\n        return h('div', ctx.$attrs ?? ctx._.attrs)\n      }\n    }\n  } else if (clone.template) {\n    // handle runtime-compiler template\n    clone.template = `\n      <template v-if=\"mounted$\">${component.template}</template>\n      <template v-else><div></div></template>\n    `\n  }\n\n  clone.setup = (props, ctx) => {\n    const mounted$ = ref(false)\n    onMounted(() => { mounted$.value = true })\n\n    return Promise.resolve(component.setup?.(props, ctx) || {})\n      .then((setupState) => {\n        return typeof setupState !== 'function'\n          ? { ...setupState, mounted$ }\n          : (...args) => {\n              if (mounted$.value) {\n                const res = setupState(...args)\n                return (res.children === null || typeof res.children === 'string')\n                  ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag)\n                  : h(res)\n              } else {\n                return h('div', ctx.attrs)\n              }\n            }\n      })\n  }\n\n  cache.set(component, clone)\n\n  return clone\n}\n"],"names":[],"mappings":";AAEA,MAAA,qBAAA,gCAAA;AAAA,EACA,MAAA;AAAA,EACA,cAAA;AAAA;AAAA,EAEA,OAAA,CAAA,YAAA,eAAA,kBAAA,aAAA;AAAA,EACA,MAAA,GAAA,EAAA,OAAA,MAAA,GAAA;AACA,UAAA,UAAA,IAAA,KAAA;AAEA,WAAA,CAAA,UAAA;;AACA,UAAA,QAAA,OAAA;AAAA,gBAAA,WAAA,YAAA;AAAA,MAAA;AACA,YAAA,OAAA,MAAA,YAAA,MAAA;AACA,UAAA,MAAA;AAAA,eAAA;MAAA;AACA,YAAA,cAAA,MAAA,YAAA,MAAA,eAAA;AACA,YAAA,cAAA,MAAA,eAAA,MAAA,kBAAA;AACA,aAAA,mBAAA,aAAA,OAAA,WAAA;AAAA,IACA;AAAA,EACA;AACA,CAAA;","x_google_ignoreList":[0]}