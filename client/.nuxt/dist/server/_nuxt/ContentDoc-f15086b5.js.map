{"version":3,"file":"ContentDoc-f15086b5.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/composables/head.mjs","../../../../node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue"],"sourcesContent":["import { hasProtocol, joinURL, withTrailingSlash, withoutTrailingSlash } from \"ufo\";\nimport { useRoute, nextTick, useHead, unref, watch, useRuntimeConfig } from \"#imports\";\nexport const useContentHead = (_content, to = useRoute()) => {\n  const content = unref(_content);\n  const config = useRuntimeConfig();\n  const refreshHead = (data = content) => {\n    if (!to.path || !data) {\n      return;\n    }\n    const head = Object.assign({}, data?.head || {});\n    head.meta = [...head.meta || []];\n    head.link = [...head.link || []];\n    const title = head.title || data?.title;\n    if (title) {\n      head.title = title;\n      if (process.server && !head.meta.some((m) => m.property === \"og:title\")) {\n        head.meta.push({\n          name: \"og:title\",\n          content: title\n        });\n      }\n    }\n    const host = config.public.content.host;\n    if (process.server && host) {\n      const _url = joinURL(host ?? \"/\", config.app.baseURL, to.fullPath);\n      const url = config.public.content.trailingSlash ? withTrailingSlash(_url) : withoutTrailingSlash(_url);\n      if (!head.meta.some((m) => m.property === \"og:url\")) {\n        head.meta.push({\n          name: \"og:url\",\n          content: url\n        });\n      }\n      if (!head.link.some((m) => m.rel === \"canonical\")) {\n        head.link.push({\n          rel: \"canonical\",\n          href: url\n        });\n      }\n    }\n    const description = head?.description || data?.description;\n    if (description && head.meta.filter((m) => m.name === \"description\").length === 0) {\n      head.meta.push({\n        name: \"description\",\n        content: description\n      });\n    }\n    if (process.server && description && !head.meta.some((m) => m.property === \"og:description\")) {\n      head.meta.push({\n        name: \"og:description\",\n        content: description\n      });\n    }\n    const image = head?.image || data?.image;\n    if (process.server && image && head.meta.filter((m) => m.property === \"og:image\").length === 0) {\n      if (typeof image === \"string\") {\n        head.meta.push({\n          property: \"og:image\",\n          // @ts-ignore - We expect `head.image` from Nuxt configurations...\n          content: host && !hasProtocol(image) ? new URL(joinURL(config.app.baseURL, image), host).href : image\n        });\n      }\n      if (typeof image === \"object\") {\n        const imageKeys = [\n          \"src\",\n          \"secure_url\",\n          \"type\",\n          \"width\",\n          \"height\",\n          \"alt\"\n        ];\n        for (const key of imageKeys) {\n          if (key === \"src\" && image.src) {\n            const isAbsoluteURL = hasProtocol(image.src);\n            const imageURL = isAbsoluteURL ? image.src : joinURL(config.app.baseURL, image.src ?? \"/\");\n            head.meta.push({\n              property: \"og:image\",\n              content: host && !isAbsoluteURL ? new URL(imageURL, host).href : imageURL\n            });\n          } else if (image[key]) {\n            head.meta.push({\n              property: `og:image:${key}`,\n              content: image[key]\n            });\n          }\n        }\n      }\n    }\n    if (process.client) {\n      nextTick(() => useHead(head));\n    } else {\n      useHead(head);\n    }\n  };\n  watch(() => unref(_content), refreshHead, { immediate: true });\n};\n","<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport ContentRenderer from \"./ContentRenderer.vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nimport { useRoute, useContentHead } from \"#imports\";\nexport default defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    /**\n     * Renderer props\n     */\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default useRoute().path\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Whether or not to map the document data to the `head` property.\n     */\n    head: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  /**\n   * Document empty fallback\n   * @slot empty\n   */\n  /**\n   * Document not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (head) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (head) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            // Forward local `empty` slots to ContentRenderer if it is used.\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        // Empty slot\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\n</script>\n"],"names":["ContentRenderer"],"mappings":"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","x_google_ignoreList":[0,1]}